1. 

- function isValid(formula) : Define uma função chamada isValid que recebe um argumento formula.
- return (...) : irá returnar um valor lógico com base na condição dada

Condições:

1 = !(formula.includes(1) && formula.includes(2)) : se a formula tiver 1 e 2, então irá retornar um true, mas para retornar um false usa o ! assim ivertendo o resultado lógico para false.

2 = !(formula.includes(3) && formula.includes(4)) : a mesma teoria de "1"

3 = (formula.include(5) === formula.includes(6)) : a formula 5 deve ser igual a formula 6 e retorna verdadeiro se estiverem juntos

4 = (formula.includes(7) || formula.include(8)) : a formula 7 e 8 deve ter pelo menos um deles, ou ambos juntos, retorna true.

function isValid(formula){
    return{
        !(formula.includes(1) && formula.includes(2)) &&  /*  
        !(formula.includes(3) && formula.includes(4)) &&   verifica se ambos estão juntos
         (formula.includes(5) === formula.includes(6)) && */
         (formula.includes(7) || formula.includes(8))     /* verifica se a formula 7 ou 8 esta 
     }                                                    presente, ou se ambos estão juntos */
}

function isValid(formula){
    if(formula(1) && formula(2)){
        return false;
    }
    
    else if(formula(3) && formula(4)){ 
        return false;
    }

    else if(formula(5) != formula(6)){
        return true;
    }

    else if(formula(7) || formula(8)){
        return true;
    }

    else{
        return false;
    }
}

2.

function (isValid a =>) //abreviação da função de arrow

isValid = a => !(a.includes(1) && a.includes(2))&&  // A função com o uso de Arrow function se torna 
               !(a.includes(3) && a.includes(4))&&     mais compactada do que a 1.
               (a.includes(5) === a.includes(6))&&
               (a.inlclude(7) || a.includes(8));

3. 

    const {
    // cannot proíbe valores simultaneos na formula
    // must verifica dois elementos juntos
    // any verifica entre elementos um deve existir
    }

4. 

bind {
    // has - serve para vincular o contexto.. então se aplicar o contexto de formula.include.. o has terá esse contexto, então has(1) é == que formula.includes(1);
}






